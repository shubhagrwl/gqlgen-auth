// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Code struct {
	Email   string          `json:"email"`
	Code    string          `json:"code"`
	Service SendCodeService `json:"service"`
}

type CodeResponse struct {
	Code string `json:"code"`
}

type Login struct {
	Email    *string `json:"email"`
	Password *string `json:"password"`
}

type LoginResponse struct {
	JwtToken *TokenDetails `json:"jwtToken"`
	User     *User         `json:"user"`
}

type ResetPassword struct {
	Email    string `json:"email"`
	Code     string `json:"code"`
	Password string `json:"password"`
}

type Response struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type SendCode struct {
	Email   string          `json:"email"`
	Service SendCodeService `json:"service"`
}

type Success struct {
	Success bool `json:"success"`
}

type Token struct {
	Email string `json:"email"`
}

type TokenDetails struct {
	AccessToken  *string `json:"AccessToken"`
	RefreshToken *string `json:"RefreshToken"`
	AccessUUID   *string `json:"AccessUuid"`
	RefreshUUID  *string `json:"RefreshUuid"`
	AtExpires    *int    `json:"AtExpires"`
	RtExpires    *int    `json:"RtExpires"`
}

type User struct {
	ID              string  `json:"id"`
	FullName        *string `json:"fullName"`
	DateOfBirth     *string `json:"dateOfBirth"`
	Password        *string `json:"password"`
	Email           *string `json:"email"`
	IsEmailVerified *bool   `json:"isEmailVerified"`
	LastLoginAt     *string `json:"lastLoginAt"`
	Active          *bool   `json:"active"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
}

type UserInput struct {
	FullName    string `json:"fullName"`
	UserName    string `json:"userName"`
	DateOfBirth string `json:"dateOfBirth"`
	Password    string `json:"password"`
	Email       string `json:"email"`
}

type Gender string

const (
	GenderMale        Gender = "Male"
	GenderFemale      Gender = "Female"
	GenderTransgender Gender = "Transgender"
	GenderOther       Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderTransgender,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderTransgender, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SendCodeService string

const (
	SendCodeServiceForgetPassword SendCodeService = "ForgetPassword"
	SendCodeServiceSignUp         SendCodeService = "SignUp"
)

var AllSendCodeService = []SendCodeService{
	SendCodeServiceForgetPassword,
	SendCodeServiceSignUp,
}

func (e SendCodeService) IsValid() bool {
	switch e {
	case SendCodeServiceForgetPassword, SendCodeServiceSignUp:
		return true
	}
	return false
}

func (e SendCodeService) String() string {
	return string(e)
}

func (e *SendCodeService) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SendCodeService(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SendCodeService", str)
	}
	return nil
}

func (e SendCodeService) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
